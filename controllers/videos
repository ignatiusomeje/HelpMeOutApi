const fs = require("fs");
const Video = require("../model/video");
const { default: mongoose } = require("mongoose");

const createID = async (req, res) => {
  try {
    // const { mimeType } = req.body;
    // if (!mimeType) {
    //   return res.status(400).json({
    //     status: 400,
    //     message: `mimeType of Video is needed`,
    //   });
    // }
    // if (!mimeType.includes("video")) {
    //   return res.status(400).json({
    //     status: 400,
    //     message: `mimeType must be a type video`,
    //   });
    // }
    const dataNeeded = {
      url: "",
      // mimeType,
      transcription: "",
      payload: [],
    };
    const video = new Video(dataNeeded);
    const newVideo = await video.save();
    return res.status(200).json({
      status: 200,
      message: `success`,
      data: {
        id: newVideo.id,
      },
    });
  } catch (error) {
    res.status(500).json({
      status: 500,
      message: `Error Uploading video: ${error?.message}`,
    });
  }
};

const fetchOneVideo = async (req, res) => {
  try {
    const paramsId = req.params.id;
    if (!mongoose.isValidObjectId(paramsId)) {
      return res.status(400).json({
        status: 400,
        message: `Invalid ID sent`,
      });
    }
    const video = await Video.findById(paramsId).select("-payload");
    if (!video) {
      return res.status(404).json({
        status: 404,
        message: `Video Not Found`,
      });
    }
    return res.status(200).json({
      status: 200,
      message: "Success",
      data: video,
    });
  } catch (error) {
    res.status(500).json({
      status: 500,
      message: `Error Fetching video: ${error?.message}`,
    });
  }
};

const playOneVideo = async (req, res) => {
  try {
    const paramsId = req.params.id;
    if (!mongoose.isValidObjectId(paramsId)) {
      return res.status(400).json({
        status: 400,
        message: `Invalid ID sent`,
      });
    }
    const video = await Video.findById(paramsId).select("name mimeType");
    if (!video) {
      return res.status(404).json({
        status: 404,
        message: `Video Not Found`,
      });
    }
    let range = req.headers.range;
    if (!range) {
      range = "bytes=0";
    }
    const videoPath = `./videos/${video.name}.${video.mimeType.split("/")[1]}`;
    const videoSize = fs.statSync(videoPath).size;
    // parse range
    // example: "byttes=32324-"
    const CHUNK_SIZE = 10 ** 6; //1MB;
    const start = Number(range.replace(/\D/g, ""));
    const end = Math.min(start + CHUNK_SIZE, videoSize - 1);
    const contentLength = end - start + 1;
    const headers = {
      "Content-Range": `bytes ${start}-${end}/${videoSize}`,
      "Accept-Ranges": "bytes",
      "Content-Length": contentLength,
      "Content-Type": "video/mp4",
    };
    res.writeHead(206, headers);
    const videoStream = fs.createReadStream(videoPath, { start, end });
    videoStream.pipe(res);
  } catch (error) {
    res.status(500).json({
      status: 500,
      message: `Error Playing video: ${error?.message}`,
    });
  }
};

const saveOneVideo = async (req, res)=>{
  try {
    console.log(req.body)
    console.log(req);
  } catch (error) {
    res.status(500).json({
      status: 500,
      message: `Error Saving video: ${error?.message}`,
    });
  }
}

module.exports = {fetchOneVideo, playOneVideo, createID, saveOneVideo };
