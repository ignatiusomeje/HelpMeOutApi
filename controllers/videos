const fs = require("fs");
const asyncFs = require("fs").promises;
const Video = require("../model/video");
const { default: mongoose } = require("mongoose");
const { saveToFile, getBinaryData } = require("../helpers");

process.env.BASE_URL = "http://localhost:5000";

const createID = async (req, res) => {
  try {
    const dataNeeded = {
      url: "",
      transcription: "",
      payload: [],
      mimeType: "",
    };
    const video = new Video(dataNeeded);
    const newVideo = await video.save();
    return res.status(200).json({
      status: 200,
      message: `success`,
      data: {
        id: newVideo.id,
      },
    });
  } catch (error) {
    res.status(500).json({
      status: 500,
      message: `Error Uploading video: ${error?.message}`,
    });
  }
};

const fetchOneVideo = async (req, res) => {
  try {
    const paramsId = req.params.id;
    if (!mongoose.isValidObjectId(paramsId)) {
      return res.status(400).json({
        status: 400,
        message: `Invalid ID sent`,
      });
    }
    const video = await Video.findById(paramsId).select("-payload");
    if (!video) {
      return res.status(404).json({
        status: 404,
        message: `Video Not Found`,
      });
    }
    return res.status(200).json({
      status: 200,
      message: "Success",
      data: video,
    });
  } catch (error) {
    res.status(500).json({
      status: 500,
      message: `Error Fetching video: ${error?.message}`,
    });
  }
};

const playOneVideo = async (req, res) => {
  try {
    const paramsId = req.params.id;
    if (!mongoose.isValidObjectId(paramsId)) {
      return res.status(400).json({
        status: 400,
        message: `Invalid ID sent`,
      });
    }
    const video = await Video.findById(paramsId).select("name mimeType");
    if (!video) {
      return res.status(404).json({
        status: 404,
        message: `Video Not Found`,
      });
    }
    let range = req.headers.range;
    if (!range) {
      range = "bytes=0";
    }
    const videoPath = `./videos/${video.name}.${video.mimeType.split("/")[1]}`;
    const videoSize = fs.statSync(videoPath).size;
    const CHUNK_SIZE = 10 ** 6; //1MB;
    const start = Number(range.replace(/\D/g, ""));
    const end = Math.min(start + CHUNK_SIZE, videoSize - 1);
    const contentLength = end - start + 1;
    const headers = {
      "Content-Range": `bytes ${start}-${end}/${videoSize}`,
      "Accept-Ranges": "bytes",
      "Content-Length": contentLength,
      "Content-Type": "video/mp4",
    };
    res.writeHead(206, headers);
    const videoStream = fs.createReadStream(videoPath, { start, end });
    videoStream.pipe(res);
  } catch (error) {
    res.status(500).json({
      status: 500,
      message: `Error Playing video: ${error?.message}`,
    });
  }
};

const saveOneVideo = async (req, res) => {
  try {
    const paramsId = req.params.id;
    if (!mongoose.isValidObjectId(paramsId)) {
      return res.status(400).json({
        status: 400,
        message: `Invalid ID sent`,
      });
    }

    const video = await Video.findById(paramsId);
    if (!video) {
      return res.status(404).json({
        status: 404,
        message: `Video Not Found`,
      });
    }
    if (video.mimeType === "") {
      const mimeType = req.headers["content-type"];
      await video.set({ mimeType: mimeType });
      await video.save();
    }

    const chunks = [];
    req.on("data", (chunk) => {
      chunks.push(chunk);
    });

    req.on("end", async () => {
      const dataBuffer = Buffer.concat(chunks);

      await saveToFile(dataBuffer, paramsId);
      const completeChunk = req.headers.complete;
      // if (completeChunk === true){
      // 651ab728fa9355859395e914
      if (true) {
        const binaryData = await getBinaryData(paramsId);
        const bufferNeeded = Buffer.from(binaryData);
        console.log(bufferNeeded)
        if (Buffer.isBuffer(bufferNeeded)) {
          // console.log(video)
          console.log(video.name, video.mimeType.split("/")[1], "check here");
          await asyncFs.writeFile( `./videos/${video.name}.webm`, bufferNeeded)
          // let writeStream = await fs.createWriteStream(
          //   `./videos/${video.name}.${video.mimeType.split("/")[1]}`
          // );
          // await writeStream.write(bufferNeeded, 'binary');
          // await writeStream.end();
          // fs.createWriteStream(
          //   `./videos/${video.name}.${video.mimeType.split("/")[1]}`,
          //   buffer,
          //   async (err) => {
          //     console.log(err)
          //     if (err) {
          //       return res.status(500).json({
          //         status: 500,
          //         message: `error saving Video: ${err?.message}`,
          //       });
          //     }
          await video.set({
            url: `${process.env.BASE_URL}/videos/play/${paramsId}`,
          });
          await video.save();
          // fs.unlink(`./videos/${paramsId}.json`, (err) => {
          //   if (err) {
          //     return res.status(500).json({
          //       status: 500,
          //       message: "error deleting data",
          //     });
          //   }
          return await res.status(200).json({
            status: 200,
            message: "Video Created",
            data: video,
          });
          // });
          // }
          // );
        }
      }
      res.status(200).json({
        status: 200,
        message: "Success",
      });
    });
  } catch (error) {
    res.status(500).json({
      status: 500,
      message: `Error Saving video: ${error?.message}`,
    });
  }
};

module.exports = { fetchOneVideo, playOneVideo, createID, saveOneVideo };
