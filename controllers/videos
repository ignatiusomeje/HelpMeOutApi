const fs = require("fs");
const { v4: uuidv4 } = require("uuid");
const { readFileFunc, writeFileFunc } = require("../utility/read-write-file");

const videoUpload = async (req, res) => {
  try {
    const { mimeType } = req.body;
    if (!mimeType) {
      return res.status(400).json({
        status: 400,
        message: `mimeType of Video is needed`,
      });
    }
    if (!mimeType.includes("video")) {
      return res.status(400).json({
        status: 400,
        message: `mimeType must be a type video`,
      });
    }
    const dataNeeded = {
      id: uuidv4(),
      name: `record-${new Date()}`,
      url: "",
      mimeType,
      transcription: "",
      payload: [],
    };
    const data = await readFileFunc();
    if (!data.length) {
      res.status(500).json({
        status: 500,
        message: `Error generating ID`,
      });
    }
    const newData = [dataNeeded, ...data];
    await writeFileFunc(newData);
    return res.status(200).json({
      status: 200,
      message: `success`,
      data: {
        id: dataNeeded.id,
      },
    });
  } catch (error) {
    res.status(500).json({
      status: 500,
      message: `Error Uploading video: ${error?.message}`,
    });
  }
};

const fetchOneVideo = async (req, res) => {
  try {
    const paramsId = req.params.id;
    const data = await readFileFunc();
    if (!data.length) {
      res.status(500).json({
        status: 500,
        message: `Error Fetching Video with ID: ${id}`,
      });
    }
    const videoNeeded = data.filter((video) => video.id === paramsId);
    if (videoNeeded.length < 1) {
      return res.status(404).json({
        stats: 404,
        message: `Video not Found`,
      });
    }
    const { id, name, url, mimeType, transcription } = videoNeeded[0];
    return res.status(200).json({
      status: 200,
      message: "Success",
      data: {
        id,
        name,
        url,
        mimeType,
        transcription,
      },
    });
  } catch (error) {
    res.status(500).json({
      stats: 500,
      message: `Error Fetching video: ${error?.message}`,
    });
  }
};

const playOneVideo = async (req, res) => {
  try {
    const paramsId = req.params.id;
    const data = await readFileFunc();
    if (!data.length) {
      res.status(500).json({
        status: 500,
        message: `Error playing Video with ID: ${id}`,
      });
    }
    const videoNeeded = data.filter((video) => video.id === paramsId);
    let range = req.headers.range;
    if (!range) {
      range = "bytes=0";
    }
    const videoPath = `./videos/${videoNeeded[0].name}`;
    const videoSize = fs.statSync(videoPath).size;
    // parse range
    // example: "byttes=32324-"
    const CHUNK_SIZE = 10 ** 6; //1MB;
    const start = Number(range.replace(/\D/g, ""));
    const end = Math.min(start + CHUNK_SIZE, videoSize - 1);
    const contentLength = end - start + 1;
    const headers = {
      "Content-Range": `bytes ${start}-${end}/${videoSize}`,
      "Accept-Ranges": "bytes",
      "Content-Length": contentLength,
      "Content-Type": "video/mp4",
    };
    res.writeHead(206, headers);
    const videoStream = fs.createReadStream(videoPath, { start, end });
    videoStream.pipe(res);
  } catch (error) {
    res.status(500).json({
      stats: 500,
      message: `Error Playing video: ${error?.message}`,
    });
  }
};

module.exports = { videoUpload, fetchOneVideo, playOneVideo };
